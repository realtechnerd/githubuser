{"version":3,"sources":["components/Header.jsx","components/Input.jsx","components/Card.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","Input","state","id","onSubmit","this","props","test","type","name","value","onChange","placeholder","autoComplete","React","Component","Card","site","placeholder1","bio","src","img","alt","url","followers","following","repositories","MainContent","input","data","handleChange","bind","getInfo","fetch","then","res","json","console","log","setState","blog","e","preventDefault","login","html_url","avatar_url","public_repos","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eea39865.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction Header() {\n    return(\n        <div className=\"Header\">\n            <h1>Github User Find</h1>\n            <a href=\"https://realtechnerd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">By Nithil Krishnaraj</a>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport \"./style.css\";\n\nclass Input extends React.Component {\n    state = {  }\n    render() { \n        return ( \n            <div className=\"Card\">\n            <h4 id=\"titl\">User Lookup</h4>\n            <form onSubmit={this.props.test}>\n                <input \n                    type=\"text\"\n                    name=\"input\"\n                    value={this.props.value} \n                    id=\"input\"\n                    onChange={this.props.onChange}\n                    placeholder=\"Enter a username..\"\n                    autoComplete=\"off\"\n                />\n            </form>\n        </div>\n         );\n    }\n}\n \nexport default Input;","import React from 'react';\n\nfunction Card(props) {\n    const placeholder = props.site === \"\" ? \"This user has no Github site.\" : props.site;\n    const placeholder1 = props.bio === null ? \"This user has no bio.\" : props.bio;\n    return(\n        <div>\n        <div className=\"i Card\">\n            <div className=\"circular--landscape\">\n                <img src={props.img} alt=\"\"/>\n            </div>\n            <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\"><h5 className=\"i\">@{props.name}</h5></a>\n            <br/>\n            <div className=\"rf\">\n                <a href={\"https://github.com/\"+props.name+\"?tab=followers\"} target=\"_blank\" rel=\"noopener noreferrer\"><h6>Followers: {props.followers}</h6></a>\n                <a href={\"https://github.com/\"+props.name+\"?tab=following\"} target=\"_blank\" rel=\"noopener noreferrer\"><h6>Following: {props.following}</h6></a>\n                <a href={\"https://github.com/\"+props.name+\"?tab=repositories\"} target=\"_blank\" rel=\"noopener noreferrer\"><h6>Repositories: {props.repositories}</h6></a>\n            </div>\n            <p className=\"i\">{placeholder1}</p >\n            <a href={props.site} className=\"ia\" target=\"_blank\" rel=\"noopener noreferrer\">{placeholder}</a>\n        </div>\n        </div>\n    )\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Input from \"./Input.jsx\";\nimport \"./style.css\";\nimport Card from \"./Card.jsx\";\n\nclass MainContent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: \"\",\n            data: \"\",\n            site: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.getInfo = this.getInfo.bind(this);\n    };\n    componentDidMount() {\n        fetch(`https://api.github.com/users/realtechnerd`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                this.setState({\n                    data: data, site: data.blog\n                })\n            })\n    }\n    handleChange(e) {\n        const {name, value} = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    };\n    getInfo(e) {\n        fetch(`https://api.github.com/users/${this.state.input}`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                this.setState({\n                    data: data, site: data.blog\n                })\n            })\n            if (this.state.input === \"\") {\n                fetch(`https://api.github.com/users/realtechnerd`)\n                .then(res => res.json())\n                .then(data => {\n                    console.log(data);\n                    this.setState({\n                        data: data, site: data.blog\n                    })\n                })\n            }\n            e.preventDefault();\n    }\n    render() { \n        return ( \n            <div className=\"container\">\n                <div className=\"MainContent\">\n                <Input test={this.getInfo} value={this.state.input} onChange={this.handleChange}/>\n                <br/>\n                <Card \n                    name={this.state.data.login}\n                    url={this.state.data.html_url}\n                    img={this.state.data.avatar_url} \n                    followers={this.state.data.followers}\n                    following={this.state.data.following}\n                    site={this.state.site}\n                    input={this.state.input}\n                    bio={this.state.data.bio}\n                    repositories={this.state.data.public_repos}\n                />\n                </div>\n            </div>\n         );\n    };\n};\n \nexport default MainContent;","import React from 'react';\nimport Header from \"./components/Header.jsx\";\nimport MainContent from \"./components/MainContent.jsx\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}